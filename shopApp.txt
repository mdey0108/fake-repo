Below is the **complete folder structure** and **code** for the **Spring Boot + React** project. This includes the backend (Spring Boot) and frontend (React) with all necessary files and configurations.

---

### **Folder Structure**

#### **Backend (Spring Boot)**
```
shop-backend/
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/
│   │   │       └── shop/
│   │   │           ├── controller/
│   │   │           │   ├── BillController.java
│   │   │           │   └── ProductController.java
│   │   │           ├── model/
│   │   │           │   ├── Bill.java
│   │   │           │   ├── BillItem.java
│   │   │           │   └── Product.java
│   │   │           ├── repository/
│   │   │           │   ├── BillItemRepository.java
│   │   │           │   ├── BillRepository.java
│   │   │           │   └── ProductRepository.java
│   │   │           ├── service/
│   │   │           │   ├── BillService.java
│   │   │           │   └── ProductService.java
│   │   │           └── ShopApplication.java
│   │   └── resources/
│   │       ├── application.properties
│   │       └── data.sql
│   └── test/
│       └── java/
│           └── com/
│               └── shop/
│                   └── ShopApplicationTests.java
├── pom.xml
└── README.md
```

#### **Frontend (React)**
```
shop-frontend/
├── public/
│   ├── index.html
│   └── assets/            # Place images or icons here
├── src/
│   ├── components/
│   │   ├── BillGenerator.js
│   │   ├── ProductForm.js
│   │   └── ProductList.js
│   ├── App.js
│   ├── index.js
│   └── styles/
│       ├── App.css
│       ├── BillGenerator.css
│       ├── ProductForm.css
│       └── ProductList.css
├── package.json
├── README.md
└── .gitignore
```

---

### **Backend Code**

#### 1. **`application.properties`**
```properties
spring.datasource.url=jdbc:mysql://localhost:3306/shopdb
spring.datasource.username=root
spring.datasource.password=password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
```

#### 2. **`Product.java`**
```java
package com.shop.model;

import jakarta.persistence.*;
import lombok.Data;

@Entity
@Data
public class Product {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String productNumber;
    private String name;
    private double price;
    private int quantity;
}
```

#### 3. **`Bill.java`**
```java
package com.shop.model;

import jakarta.persistence.*;
import lombok.Data;
import java.time.LocalDateTime;

@Entity
@Data
public class Bill {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String billNumber;
    private double totalAmount;
    private LocalDateTime createdAt;
}
```

#### 4. **`BillItem.java`**
```java
package com.shop.model;

import jakarta.persistence.*;
import lombok.Data;

@Entity
@Data
public class BillItem {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private Long billId;
    private Long productId;
    private int quantity;
    private double price;
}
```

#### 5. **`ProductRepository.java`**
```java
package com.shop.repository;

import com.shop.model.Product;
import org.springframework.data.jpa.repository.JpaRepository;

public interface ProductRepository extends JpaRepository<Product, Long> {
}
```

#### 6. **`BillRepository.java`**
```java
package com.shop.repository;

import com.shop.model.Bill;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BillRepository extends JpaRepository<Bill, Long> {
}
```

#### 7. **`BillItemRepository.java`**
```java
package com.shop.repository;

import com.shop.model.BillItem;
import org.springframework.data.jpa.repository.JpaRepository;

public interface BillItemRepository extends JpaRepository<BillItem, Long> {
}
```

#### 8. **`ProductService.java`**
```java
package com.shop.service;

import com.shop.model.Product;
import com.shop.repository.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class ProductService {
    @Autowired
    private ProductRepository productRepository;

    public List<Product> getAllProducts() {
        return productRepository.findAll();
    }

    public Product saveProduct(Product product) {
        return productRepository.save(product);
    }

    public Product updateProduct(Long id, Product product) {
        product.setId(id);
        return productRepository.save(product);
    }

    public void deleteProduct(Long id) {
        productRepository.deleteById(id);
    }
}
```

#### 9. **`BillService.java`**
```java
package com.shop.service;

import com.shop.model.Bill;
import com.shop.model.BillItem;
import com.shop.repository.BillItemRepository;
import com.shop.repository.BillRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.time.LocalDateTime;
import java.util.List;

@Service
public class BillService {
    @Autowired
    private BillRepository billRepository;

    @Autowired
    private BillItemRepository billItemRepository;

    public Bill generateBill(List<BillItem> items) {
        double totalAmount = items.stream().mapToDouble(item -> item.getPrice() * item.getQuantity()).sum();
        Bill bill = new Bill();
        bill.setBillNumber("BILL-" + System.currentTimeMillis());
        bill.setTotalAmount(totalAmount);
        bill.setCreatedAt(LocalDateTime.now());
        Bill savedBill = billRepository.save(bill);

        items.forEach(item -> {
            item.setBillId(savedBill.getId());
            billItemRepository.save(item);
        });

        return savedBill;
    }
}
```

#### 10. **`ProductController.java`**
```java
package com.shop.controller;

import com.shop.model.Product;
import com.shop.service.ProductService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/products")
public class ProductController {
    @Autowired
    private ProductService productService;

    @GetMapping
    public List<Product> getAllProducts() {
        return productService.getAllProducts();
    }

    @PostMapping
    public Product saveProduct(@RequestBody Product product) {
        return productService.saveProduct(product);
    }

    @PutMapping("/{id}")
    public Product updateProduct(@PathVariable Long id, @RequestBody Product product) {
        return productService.updateProduct(id, product);
    }

    @DeleteMapping("/{id}")
    public void deleteProduct(@PathVariable Long id) {
        productService.deleteProduct(id);
    }
}
```

#### 11. **`BillController.java`**
```java
package com.shop.controller;

import com.shop.model.BillItem;
import com.shop.service.BillService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/bills")
public class BillController {
    @Autowired
    private BillService billService;

    @PostMapping
    public Bill generateBill(@RequestBody List<BillItem> items) {
        return billService.generateBill(items);
    }
}
```

#### 12. **`ShopApplication.java`**
```java
package com.shop;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ShopApplication {
    public static void main(String[] args) {
        SpringApplication.run(ShopApplication.class, args);
    }
}
```

---

### **Frontend Code**

#### 1. **`App.js`**
```javascript
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import ProductForm from './components/ProductForm';
import ProductList from './components/ProductList';
import BillGenerator from './components/BillGenerator';
import './styles/App.css';

function App() {
  const [products, setProducts] = useState([]);

  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    const response = await axios.get('/api/products');
    setProducts(response.data);
  };

  return (
    <div className="App">
      <h1>Shop Management System</h1>
      <ProductForm fetchProducts={fetchProducts} />
      <ProductList products={products} fetchProducts={fetchProducts} />
      <BillGenerator products={products} />
    </div>
  );
}

export default App;
```

#### 2. **`ProductForm.js`**
```javascript
import React, { useState } from 'react';
import axios from 'axios';
import './styles/ProductForm.css';

const ProductForm = ({ fetchProducts }) => {
  const [product, setProduct] = useState({ productNumber: '', name: '', price: 0, quantity: 0 });

  const handleSubmit = async (e) => {
    e.preventDefault();
    await axios.post('/api/products', product);
    fetchProducts();
    setProduct({ productNumber: '', name: '', price: 0, quantity: 0 });
  };

  return (
    <form onSubmit={handleSubmit} className="product-form">
      <input
        type="text"
        placeholder="Product Number"
        value={product.productNumber}
        onChange={(e) => setProduct({ ...product, productNumber: e.target.value })}
      />
      <input
        type="text"
        placeholder="Product Name"
        value={product.name}
        onChange={(e) => setProduct({ ...product, name: e.target.value })}
      />
      <input
        type="number"
        placeholder="Price"
        value={product.price}
        onChange={(e) => setProduct({ ...product, price: e.target.value })}
      />
      <input
        type="number"
        placeholder="Quantity"
        value={product.quantity}
        onChange={(e) => setProduct({ ...product, quantity: e.target.value })}
      />
      <button type="submit">Add Product</button>
    </form>
  );
};

export default ProductForm;
```

#### 3. **`ProductList.js`**
```javascript
import React from 'react';
import axios from 'axios';
import './styles/ProductList.css';

const ProductList = ({ products, fetchProducts }) => {
  const handleDelete = async (id) => {
    await axios.delete(`/api/products/${id}`);
    fetchProducts();
  };

  return (
    <div className="product-list">
      <h2>Products</h2>
      <ul>
        {products.map((product) => (
          <li key={product.id}>
            {product.name} - {product.price} - {product.quantity}
            <button onClick={() => handleDelete(product.id)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default ProductList;
```

#### 4. **`BillGenerator.js`**
```javascript
import React, { useState } from 'react';
import axios from 'axios';
import './styles/BillGenerator.css';

const BillGenerator = ({ products }) => {
  const [selectedProducts, setSelectedProducts] = useState([]);

  const handleAddProduct = (product) => {
    setSelectedProducts([...selectedProducts, { ...product, quantity: 1 }]);
  };

  const handleGenerateBill = async () => {
    const billItems = selectedProducts.map((product) => ({
      productId: product.id,
      quantity: product.quantity,
      price: product.price,
    }));
    const response = await axios.post('/api/bills', billItems);
    alert(`Bill Generated: ${response.data.billNumber}`);
  };

  return (
    <div className="bill-generator">
      <h2>Generate Bill</h2>
      <div>
        {products.map((product) => (
          <div key={product.id}>
            {product.name} - {product.price}
            <button onClick={() => handleAddProduct(product)}>Add to Bill</button>
          </div>
        ))}
      </div>
      <div>
        <h3>Selected Products</h3>
        <ul>
          {selectedProducts.map((product) => (
            <li key={product.id}>
              {product.name} - {product.quantity} x {product.price}
            </li>
          ))}
        </ul>
        <button onClick={handleGenerateBill}>Generate Bill</button>
      </div>
    </div>
  );
};

export default BillGenerator;
```

---

### **Run the Application**
1. Start the Spring Boot backend.
2. Start the React frontend:
   ```bash
   npm start
   ```

---

This is the complete folder structure and code for the project. Let me know if you need further assistance! 🚀